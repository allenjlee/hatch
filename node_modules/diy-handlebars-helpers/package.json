{
  "author": {
    "name": "Derek Reynolds",
    "email": "drk@diy.org",
    "url": "http://diy.org/drk"
  },
  "name": "diy-handlebars-helpers",
  "description": "Collection of generic handlebars helpers.",
  "license": {
    "type": "Apache-2.0",
    "url": "http://www.apache.org/licenses/LICENSE-2.0"
  },
  "version": "1.0.10",
  "homepage": "https://github.com/diy/handlebars-helpers",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/diy/handlebars-helpers.git"
  },
  "main": "./index.js",
  "scripts": {
    "test": "tap ./test/*.js"
  },
  "dependencies": {
    "lodash": "~1.3.1",
    "pack-it": "~1.0.0",
    "require-all": "0.0.8",
    "moment": "~2.3.1"
  },
  "devDependencies": {
    "tap": "~0.3.1",
    "codebux": "~0.1.2"
  },
  "optionalDependencies": {},
  "engines": {
    "node": ">=0.6"
  },
  "readme": "[![Build Status](https://travis-ci.org/diy/handlebars-helpers.png?branch=master)](https://travis-ci.org/diy/handlebars-helpers)\n\n## diy-handlebars-helpers\n#### Collection of generic handlebars helpers.\n\n### Installation\n```bash\nnpm install diy-handlebars-helpers\n```\n\n### Basic Use\n```javascript\nvar helpers = require('diy-handlebars-helpers');\nhelpers(); // returns a dictionary of helpers { name: function () {} }\n```\n\nRegistering helpers w/ handlebars\n\n```javascript\nvar hbs = require('handlebars-runtime');\nvar _   = require('lodash');\n\n_.extend(hbs.helpers, require('diy-handlebars-helpers')());\n```\n\n### Testing\n```bash\nnpm test\n```\n\n### Helpers\n\n#### abbr-count\n```\n{{abbr-count 4000}} // 4k+\n```\n\n#### captialize\n```\n{{capitalize 'hey dude'}} // Hey dude\n```\n\n#### chr-gt\n```\n{{chr-gt 'hey dude' 3}}\n    // WOO! string is greater than 3\n{{else}}\n    // string is not longer than 3\n{{/chr-gt}}\n```\n\n#### chr-lt\n```\n{{chr-lt 'hey dude' 3}}\n    // string is less than 3\n{{else}}\n    // WOO! string is not less than 3\n{{/chr-lt}}\n```\n\n#### each-key\n```\n{{#each-key object}}\nKey: {{this.key}} Value: {{this.value}}\n{{/each-key}}\n```\n\n#### each-limit\n```\n{{#each-limit items 3}}\n    // will only iterate 3 times even if items is longer\n{{/each-limit}}\n```\n\n#### each-reverse\n```\n{{#each-reverse items}}\n    // iterating backwards!\n{{/each-reverse}}\n```\n\n#### either\n```\n{{either false true false}}\n    // at least one value was true\n{{else}}\n    // none were true\n{{/either}}\n```\n\n#### encodeURIComponent\n```\n{{encodeURIComponent exactlyWhatYouThink}}\n```\n\n#### eq\n```\n{{#eq val1 val2}}\n    // absolute comparision was true ===\n{{else}}\n    // here not so much\n{{/eq}}\n```\n\n#### firstof\n```\n{{firstof false false 'real value' false}} // \"real value\" great for picking default text for empty variables\n```\n\n#### if-gt\n```\n{{#if-gt 10 5}}\n    // of course 10 is greater than 5\n{{else}}\n    // this wouldn't execute\n{{/if-gt}}\n```\n\n#### if-lt\n```\n{{#if-lt 5 10}}\n    // of course 5 is less than 10\n{{else}}\n    // this wouldn't execute\n{{/if-lt}}\n```\n\n#### indefinite-article\n```\n{{indefinite-article 'apple'}} // an\n{{indefinite-article 'pineapple'}} // a\n```\n\n#### input-select\n```\n{{{input-select \"month\" options \"05\"}}} // builds <select name=\"month\">...</select> an\n```\n\n`options` should be a multi-dimentional array: `[['val1', 'text1'], ['val2', 'text2']]`. If no \ntext is provided, the value will be used for the option text.\n\nThe third optional argument is the default value. (will get the `selected` attribute.)\n\n#### iter\n```\n{{#iter items}}\n    {{i}} //index\n    {{iPlus1}} // index + 1\n{{/iter}}\n```\n\n#### join\n```\n{{join array \",\"}} // \"item1, item2\"\n```\n\n#### neither\n```\n{{neither false false false}}\n    // all must be false for this to execute\n{{else}}\n    // at least one was true\n{{/neither}}\n```\n\n#### not-eq\n```\n{{#not-eq val1 val2}}\n    // absolute not comparision was true !==\n{{else}}\n    // here not so much\n{{/not-eq}}\n```\n\n#### number\n```\n{{number 100000}} // \"100,000\"\n```\n\n#### pack-it\n```\n{{#pack-it items}}\n    {{content}} // original item\n    {{size}} // pack size\n{{/pack-it}}\n```\n\n#### paragraphify\n```\n{{paragraphify textWithNewLines}} // <p>first line</p><p>second line</p>\n```\n\n#### posessive\n```\n{{posessive 'john'}} // \"john's\"\n```\n\n#### repeat\n```\n{{#repeat 5}}Hello!{{/repeat}} // \"Hello!Hello!Hello!Hello!Hello!\"\n```\n\n#### subtract\n```\n{{subtract a.length 2}}\n```\n\n#### title-case\n```\n{{title-case 'hey hey hey'}} // \"Hey Hey Hey\"\n```\n\n#### truncate\n```\n{{truncate 'mysuperlongemail@example.com'}} // \"mysuperlon…\"\n{{truncate 'mysuperlongemail@example.com' 16}} // \"mysuperlongemail…\"\n{{truncate 'mysuperlongemail@example.com' 16 ''}} // \"mysuperlongemail\"\n{{truncate 'Some sente nce with a space at truncation index.'}} // \"Some sente…\" - trims trailing whitespace before appending\n```\n\n#### urlify\n```\n{{urlify 'Hey Hey'}} // \"hey-hey\"\n```\n",
  "readmeFilename": "README.md",
  "_id": "diy-handlebars-helpers@1.0.10",
  "dist": {
    "shasum": "263bc9c508bba4f423ff8193d05675f29e153669",
    "tarball": "https://registry.npmjs.org/diy-handlebars-helpers/-/diy-handlebars-helpers-1.0.10.tgz"
  },
  "_from": "diy-handlebars-helpers@>=1.0.10 <2.0.0",
  "_npmVersion": "1.2.30",
  "_npmUser": {
    "name": "drk",
    "email": "drk@diy.org"
  },
  "maintainers": [
    {
      "name": "drk",
      "email": "drk@diy.org"
    }
  ],
  "directories": {},
  "_shasum": "263bc9c508bba4f423ff8193d05675f29e153669",
  "_resolved": "https://registry.npmjs.org/diy-handlebars-helpers/-/diy-handlebars-helpers-1.0.10.tgz",
  "bugs": {
    "url": "https://github.com/diy/handlebars-helpers/issues"
  }
}
